name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "new version number"
        required: true

jobs:
    release-branch:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v3
          with:
            repository: lmnzx/netclient
            ref: develop
        - name: setup go
          uses: actions/setup-go@v4
          with:
            go-version: 1.23
        - name: Setup git
          run: |
            git config --global user.name "Sayan Mallick"
            git config --global user.email "snyxmk@gmail.com"
        - name: Create Release Branch
          run: |
            git switch -c release-${{ inputs.version }}
        - name: Fix go mod
          run: |
            go get github.com/gravitl/netmaker@${{ inputs.version }}
            go mod tidy
            git commit -am 'update go mod for release'
        - name: Update Release Branch
          run: |
            git tag -f ${{ inputs.version }}
            git push origin release-${{ inputs.version }}
            git push origin ${{ inputs.version }}

    release-assets:
      needs: release-branch
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v3
          with:
            repository: lmnzx/netclient
            ref: release-${{ inputs.version }}
            fetch-depth: 0
        - name: Get Tags
          run: |
            git fetch --force --tags
        - name: Setup go
          uses: actions/setup-go@v5
          with:
            go-version: 1.23
        - name: GoReleaser
          uses: goreleaser/goreleaser-action@v6
          with:
            version: "~> v2"
            args: release --clean --release-notes release.md
          env:
            GITHUB_TOKEN: ${{ secrets.TOKEN }}

        - name: Rename binaries
          run: |
            cd dist
            for dir in headless_*; do
              if [ -d "$dir" ]; then
                IFS='_' read -r _ OS ARCH VERSION <<< "$dir"
                
                case $ARCH in
                  arm_5) ARCH_SUFFIX="v5" ;;
                  arm_6) ARCH_SUFFIX="v6" ;;
                  arm_7) ARCH_SUFFIX="v7" ;;
                  arm64*) ARCH_SUFFIX="" ;;
                  mips*) ARCH_SUFFIX="-${ARCH#mips_}" ;;
                  *) ARCH_SUFFIX="" ;;
                esac
                
                EXT=""
                if [ "$OS" = "windows" ]; then
                  EXT=".exe"
                fi
                
                NEW_NAME="../netclient-${OS}-${ARCH%_*}${ARCH_SUFFIX}${EXT}"
                
                mv "$dir/netclient${EXT}" "$NEW_NAME"
              fi
            done
            cd ..
    
        - name: Install SSH key
          env:
            SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          run: |
            mkdir -p ~/.ssh
            echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ssh-keyscan -H fileserver.clustercat.com >> ~/.ssh/known_hosts
    
        - name: Test SSH connection
          run: |
            if ssh -o BatchMode=yes -o StrictHostKeyChecking=no -T root@fileserver.clustercat.com; then
              echo "SSH connection successful"
            else
              echo "SSH connection failed"
              exit 1
            fi
    
        - name: Upload to server
          env:
            UPLOAD_PATH_VERSION: /var/www/files/qa/netclient-test-${{ github.event.inputs.version }}
          run: |
            ssh root@fileserver.clustercat.com "mkdir -p $UPLOAD_PATH_VERSION"
            cd dist
            ls -alh
            # find . -type f -name "netclient-*" -exec scp {} root@fileserver.clustercat.com:$UPLOAD_PATH_VERSION/ \;
